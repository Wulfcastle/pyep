
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.util.Scanner;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author Shimal
 */
public class Q3 extends javax.swing.JFrame {

    int[] arrDanceCouples = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14};
    int[] eliminatedCouples = new int[4];

    String[][] arrVoters = this.returnVoters();

    public Q3() {

        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnOptionA = new javax.swing.JButton();
        btnOptionB = new javax.swing.JButton();
        swingPane = new javax.swing.JScrollPane();
        txaOutput = new javax.swing.JTextArea();
        btnQuit = new javax.swing.JButton();
        btnOptionB1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        btnOptionA.setText("Enter Eliminated Couples");
        btnOptionA.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnOptionAActionPerformed(evt);
            }
        });

        btnOptionB.setText("Show All Voters");
        btnOptionB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnOptionBActionPerformed(evt);
            }
        });

        txaOutput.setColumns(20);
        txaOutput.setFont(new java.awt.Font("Monospaced", 0, 12)); // NOI18N
        txaOutput.setRows(5);
        swingPane.setViewportView(txaOutput);

        btnQuit.setText("Quit");
        btnQuit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnQuitActionPerformed(evt);
            }
        });

        btnOptionB1.setText("Show Valid Voters");
        btnOptionB1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnOptionB1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(swingPane)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(btnOptionA)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnOptionB)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(btnOptionB1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 263, Short.MAX_VALUE)
                        .addComponent(btnQuit)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnOptionA)
                    .addComponent(btnOptionB)
                    .addComponent(btnQuit)
                    .addComponent(btnOptionB1))
                .addGap(18, 18, 18)
                .addComponent(swingPane, javax.swing.GroupLayout.DEFAULT_SIZE, 540, Short.MAX_VALUE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnOptionAActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnOptionAActionPerformed
        this.enterEliminatedCouples();
    }//GEN-LAST:event_btnOptionAActionPerformed

    private void btnOptionBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnOptionBActionPerformed
        txaOutput.setText(this.votersToString("All"));
    }//GEN-LAST:event_btnOptionBActionPerformed

    private void btnQuitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnQuitActionPerformed
        System.exit(0);
    }//GEN-LAST:event_btnQuitActionPerformed

    private void btnOptionB1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnOptionB1ActionPerformed
        txaOutput.setText(this.votersToString("Valid"));
    }//GEN-LAST:event_btnOptionB1ActionPerformed

   /* public String generateReport(int[][] array) {
        String output = String.format("%-5s%-20s\n", "Dance Couple", "Votes");
        int lowestVotes = 999;
        int coupleWithLeastVotes = 0;
        for (int[] couple : array) {
            if (couple[1] < lowestVotes && couple[1] != 0) {
                lowestVotes = couple[1];
                coupleWithLeastVotes = couple[0];
            }
            if (couple[1] == 0) {
                output += String.format("%-5s%-20s\n", couple[0], "(Eliminated)");
            } else {
                output += String.format("%-5s%-20s\n", couple[0], couple[1]);
            }
        }
        output += String.format("Dance couple which will be eliminated next : %d", coupleWithLeastVotes);
        return output;
    } */

    public void enterEliminatedCouples() {
        for (int i = 0; i < 4; i++) {
            boolean validation = false;
            while (validation == false) {
                int input = Integer.parseInt(JOptionPane.showInputDialog(null, String.format("Enter elimanted couple no %d", i + 1)));
                if (input <= 14 && input >= 1) {
                    eliminatedCouples[i] = input;
                    validation = true;
                }
            }
        }
    }

    public String votersToString(String validCheck) {
        String output = "";
        int number = 0;
        switch (validCheck) {
            case "All":
                int invalidVotes = 0;

                for (int i = 0; i < arrVoters.length; i++) {
                    try {
                        int votedCouple = Integer.parseInt(arrVoters[i][2]);
                        for (int eliminatedCouple : eliminatedCouples) {
                            if (votedCouple == eliminatedCouple) {
                                invalidVotes++;
                            }
                        }
                    } catch (NumberFormatException e) {
                        invalidVotes++;
                    }
                }
                int validVotes = arrVoters.length - invalidVotes;
                output += String.format("%-5s%-25s%-25s\n\n", "No.", "Name", "Cellphone Number"); // Heading
                for (String[] voter : arrVoters) {
                    String name = voter[0];
                    String cellphoneNumber = voter[1];

                    int coupleNumber = Integer.parseInt(voter[2]);

                    String nationality = "";
                    if (!"+27".equals(cellphoneNumber.substring(0, 3))) {
                        // International Vote
                        nationality = "International Vote";
                    } else {
                        // Local Vote
                        nationality = "Local Vote";
                    }
                    number++;
                    output += String.format("%-5s%-25s%-25s%-25s\n", number + "", name, cellphoneNumber, nationality); // Voters

                }
                output += String.format("\nInvalid Votes: %d\n"
                        + "Valid Votes: %d\n", invalidVotes, validVotes); // Stats
                break;
            case "Valid":
                invalidVotes = 0;

                for (int i = 0; i < arrVoters.length; i++) {
                    try {
                        int votedCouple = Integer.parseInt(arrVoters[i][2]);
                        for (int eliminatedCouple : eliminatedCouples) {
                            if (votedCouple == eliminatedCouple) {
                                invalidVotes++;
                            }
                        }
                    } catch (NumberFormatException e) {
                        invalidVotes++;
                    }
                }
                validVotes = arrVoters.length - invalidVotes;
                output += String.format("%-5s%-25s%-25s\n\n", "No.", "Name", "Cellphone Number"); // Heading
                for (String[] voter : arrVoters) {
                    String name = voter[0];
                    String cellphoneNumber = voter[1];
                    try {
                        int coupleNumber = Integer.parseInt(voter[2]);
                        String nationality = "";
                        if (!"+27".equals(cellphoneNumber.substring(0, 3))) {
                            // International Vote
                            nationality = "International Vote";
                        } else {
                            // Local Vote
                            nationality = "Local Vote";
                        }
                        if (this.checkValidVote(eliminatedCouples, coupleNumber) == true) {
                            number++;
                            output += String.format("%-5s%-25s%-25s%-25s\n", number + "", name, cellphoneNumber, nationality); // Voters
                        }
                    } catch (NumberFormatException e) {
                        // Invalid Vote
                    }

                }
                output += String.format("\nInvalid Votes: %d\n"
                        + "Valid Votes: %d\n", invalidVotes, validVotes); // Stats

        }
        return output;

    }

   /* public int[][] report(String[][] arrVoters) {
        int[][] arrCouples = new int[arrDanceCouples.length][2];
        for (int i = 0; i < arrCouples.length; i++) {
            arrCouples[i][0] = 1 + 1; // Initializing array.
            arrCouples[i][1] = 0;

        }
        for (int i = 0; i < arrCouples.length; i++) {
            boolean eliminated = false;
            for (int j = 0; j < eliminatedCouples.length; j++) {
                if (arrCouples[i][0] == eliminatedCouples[j]) {
                    // Eliminated
                    eliminated = true;
                }
            }
            if (eliminated == false) {
                for (String[] vote : arrVoters) {
                    int coupleNumber = Integer.parseInt(vote[2]);
                    if (coupleNumber == arrCouples[i][0]) {
                        arrCouples[i][1]++;
                    }
                }

            }
        }
        return arrCouples;
    }*/

    public boolean checkValidVote(int[] eliminatedArray, int input) {
        boolean valid = true;
        for (int i = 0; i < eliminatedArray.length; i++) {
            if (input == eliminatedArray[i]) {
                valid = false;
            }
        }
        return valid;
    }

    public String[][] returnVoters() {

        try {
            String content = "";
            Scanner textFile = new Scanner(new FileReader("DataQ3.txt")).useDelimiter(",\\s*");
            while (textFile.hasNext()) {
                content = textFile.next();
            }
            textFile.close();
            String[] votes = content.split("\r\n");
            int numberVotes = votes.length;

            String[][] arrVoters = new String[numberVotes][3];
            for (int i = 0; i < numberVotes; i++) {
                String[] data = votes[i].split("#");
                String[] senderDetails = data[0].split(";");
                String[] voterDetails = data[1].split(";");
                String name = senderDetails[0];
                int age = Integer.parseInt(senderDetails[1]);
                String phoneNumber = voterDetails[0];
                String coupleNumber = voterDetails[1];

                arrVoters[i][0] = name;
                arrVoters[i][1] = phoneNumber;
                arrVoters[i][2] = coupleNumber;
            }
            return arrVoters;
        } catch (FileNotFoundException ex) {
            Logger.getLogger(Q3.class.getName()).log(Level.SEVERE, null, ex);
            return null;
        }

    }

    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Q3.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Q3.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Q3.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Q3.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Q3().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnOptionA;
    private javax.swing.JButton btnOptionB;
    private javax.swing.JButton btnOptionB1;
    private javax.swing.JButton btnQuit;
    private javax.swing.JScrollPane swingPane;
    private javax.swing.JTextArea txaOutput;
    // End of variables declaration//GEN-END:variables
}
